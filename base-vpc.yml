AWSTemplateFormatVersion: 2010-09-09
# This Cloudformation template deploys VPC
Description:
  
Parameters:
  NumberOfAZs:
    AllowedValues:
    - 1
    - 2
    - 3
    Description: How many Availability Zones do you wish to utilize?
    Type: Number
    Default: 2
  PrivateSubnets:
    AllowedValues:
    - True
    - False
    Description: Do you want to create private subnets in addition to public subnets?
    Type: String
    Default: True
  NATType:
    AllowedValues:
    - "Instance"
    - "Managed"
    Description: What type of NAT to use for private instances to communicate with the internet.  A single EC2 instance can be used as a NAT, or you can use the AWS NAT Gateway (managed, scalable, more expensive).  This setting will be IGNORED if you do not build private subnets.
    Type: String
    Default: "NAT Gateway"
  
Metadata:
  
Mappings:
  
Conditions: # Conditions are boolean (true/false) expressions that we will use elsewhere in the template.
  BuildPublicB: !Not [ !Equals [ !Ref NumberOfAZs, 1 ] ] # If NumberOfAZs selected value is equals to 1 then negating the result.
  BuildPublicC: !Equals [ !Ref NumberOfAZs, 3 ]
  BuildPrivateSubnets: !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateA: !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateB: !And [ !Not [ !Equals [ !Ref NumberOfAZs, 1 ] ], !Equals [!Ref PrivateSubnets, True] ]
  BuildPrivateC: !And [ !Equals [ !Ref NumberOfAZs, 3 ] , !Equals [ !Ref PrivateSubnets, True ] ]
  BuildNATGateway: !And [ !Equals [ !Ref PrivateSubnets, True ], !Equals [ !Ref NATType, "Managed" ] ] 
  BuildNATInstance: !And [ !Equals [ !Ref PrivateSubnets, True ], !Equals [ !Ref NATType, "Instance"] ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: "default"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: keyname
          Value: value
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: keyname
          Value: value
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: [VPC, InternetGateway]
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      Tags:
        - Key: keyname
          Value: value
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      Tags:
        - Key: keyname
          Value: value
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicC
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.1.30.0/24
      Tags:
        - Key: keyname
          Value: value
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: keyname
        Value: value
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: keyname
        Value: value  
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.70.0/24
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: keyname
        Value: value 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: keyname
          Value: value
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: [VPC, InternetGateway, PublicRouteTable]
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: keyname
          Value: value
  PrivateRoute1:
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway
  # A NAT Gateway will be built and used if the user selected Private subnets and a Gateway instead of an EC2 instance. 
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildNATGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: keyname
        Value: value 
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildNATGateway
    Properties:
      Domain: VPC
      PublicIpv4Pool: "String"
      Tags:
        - Key: keyname
          Value: value
  # Attach the public subnets to public route tables, and attach the private subnets to private route tables:   
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateA
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateB
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateC
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC
Transform:
  
Outputs: