AWSTemplateFormatVersion: 2010-09-09
# This Cloudformation template deploys VPC
Description: 'AWS CloudFormation Base Network Template: Template showing how to create a network in AWS including VPC, Subnets (Public/Private), Route Tables and associations, also connect private subnets with NAT device. **WARNING** This template creates an NAT Gateway o NAT instance gateway.
You will be billed for the AWS resources used if you create a stack from this template'
  
Parameters:
  NumberOfAZs:
    AllowedValues:
    - 1
    - 2
    - 3
    Description: How many Availability Zones do you wish to utilize?
    Type: Number
    Default: 2
  PrivateSubnets:
    AllowedValues:
    - True
    - False
    Description: Do you want to create private subnets in addition to public subnets?
    Type: String
    Default: True
  NATType:
    AllowedValues:
    - "Instance"
    - "Managed"
    Description: What type of NAT to use for private instances to communicate with the internet.  A single EC2 instance can be used as a NAT, or you can use the AWS NAT Gateway (managed, scalable, more expensive).  This setting will be IGNORED if you do not build private subnets.
    Type: String
    Default: "Managed"
  
Metadata:
  # Control the UI display when running this template from the AWS Management Console
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: 
          default: "Network Configuration"
        Parameters:
          - NumberOfAZs
          - PrivateSubnets
          - NATType
  
Mappings:
  #  AMI is the Amazon Linux 2 AMI.  Adjust these values as needed, they can change a few times per year
  #  Shortcode is a code to name or identify AZs.
  RegionMap:
    us-east-1:
      AMI: ami-04681a1dbd79675a5    # N Virginia
      Shortcode: 'ue1'
    us-east-2:
      AMI: ami-0cf31d971a3ca20d6    # Ohio     
      Shortcode: 'ue2'
    us-west-1:
      AMI: ami-0782017a917e973e7    # N California
      Shortcode: 'uw1'
    us-west-2:
      AMI: ami-6cd6f714             # Oregon
      Shortcode: 'uw2'
    eu-west-1:
      AMI: ami-0bdb1d6c15a40392c    # Ireland
      Shortcode: 'ew1'
    eu-central-1:
      AMI: ami-0f5dbc86dd9cbf7a8    # Frankfurt
      Shortcode: 'ec1'
    sa-east-1:
      AMI: ami-0ad7b0031d41ed4b9    # Sao Paulo
      Shortcode: 'se1'
    ap-southeast-1:
      AMI: ami-01da99628f381e50a    # Singapore
      Shortcode: 'ase1'
    ap-southeast-2:
      AMI: ami-00e17d1165b9dd3ec    # Sydney
      Shortcode: 'ase2'
    ap-northeast-1:
      AMI: ami-08847abae18baa040    # Tokyo
      Shortcode: 'ane1'
  
Conditions: # Conditions are boolean (true/false) expressions that we will use elsewhere in the template.
  BuildPublicB: !Not [ !Equals [ !Ref NumberOfAZs, 1 ] ] # If NumberOfAZs selected value is equals to 1 then negating the result.
  BuildPublicC: !Equals [ !Ref NumberOfAZs, 3 ]
  BuildPrivateSubnets: !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateA: !Equals [ !Ref PrivateSubnets, True ]
  BuildPrivateB: !And [ !Not [ !Equals [ !Ref NumberOfAZs, 1 ] ], !Equals [!Ref PrivateSubnets, True] ]
  BuildPrivateC: !And [ !Equals [ !Ref NumberOfAZs, 3 ] , !Equals [ !Ref PrivateSubnets, True ] ]
  BuildNATGateway: !And [ !Equals [ !Ref PrivateSubnets, True ], !Equals [ !Ref NATType, "Managed" ] ] 
  BuildNATInstance: !And [ !Equals [ !Ref PrivateSubnets, True ], !Equals [ !Ref NATType, "Instance"] ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: "default"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: keyname
          Value: value
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: keyname
          Value: value
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: [VPC, InternetGateway]
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      Tags:
        - Key: keyname
          Value: value
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicB
    DependsOn: VPC
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      Tags:
        - Key: keyname
          Value: value
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPublicC
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.1.30.0/24
      Tags:
        - Key: keyname
          Value: value
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateA
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: keyname
        Value: value
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: keyname
        Value: value  
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildPrivateC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.70.0/24
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
      - Key: keyname
        Value: value 
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: keyname
          Value: value
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: [VPC, InternetGateway, PublicRouteTable]
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: BuildPrivateSubnets
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: keyname
          Value: value
  PrivateRoute1:
    Type: AWS::EC2::Route
    Condition: BuildPrivateSubnets
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Instance:
      InstanceId: !If [BuildNATInstance, !Ref NATInstance, !Ref "AWS::NoValue"]
      # Route traffic through the NAT Gateway:
      NatGatewayId: !If [BuildNATGateway, !Ref NATGateway, !Ref "AWS::NoValue"] 
  # A NAT Gateway will be built and used if the user selected Private subnets and a Gateway instead of an EC2 instance. 
  NATGateway:
    Type: AWS::EC2::NatGateway
    Condition: BuildNATGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: keyname
        Value: value 
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Condition: BuildNATGateway
    Properties:
      Domain: VPC
      PublicIpv4Pool: "String"
      Tags:
        - Key: keyname
          Value: value
  # Attach the public subnets to public route tables, and attach the private subnets to private route tables:   
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateA
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateB
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPrivateC
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: BuildNATInstance
    DependsOn: AttachGateway
    Properties:
      GroupName: !Join [ 
        '-', [ 
          'sg',
          !FindInMap [ RegionMap, !Ref AWS::Region, 'Shortcode' ],
          'nat'
        ] 
      ]
      GroupDescription: Enable internal access to the NAT device
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 1024
          CidrIp: !GetAtt VPC.CidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0 
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 0 
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: keyname
          Value: value 
  # A NAT Instance will be used if the user selected Private subnets and EC2-based NAT.     
  NATInstance:
    Type: AWS::EC2::Instance
    Condition: BuildNATInstance
    DependsOn: PublicRoute1 # Must have route to IGW established.
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMI]  # lookup from AMI map
      InstanceType: t2.small
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA  # Any public subnet is fine
          AssociatePublicIpAddress: true # We will need a public IP address
          GroupSet: [ !Ref NATSecurityGroup ]  # Plug in the security group
      SourceDestCheck: false  # NATs don't work if EC2 matches source with destinations.
      UserData:      #  This code is NAT code.  Last line signals completion:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum install -y aws-cfn-bootstrap
          echo 1 > /proc/sys/net/ipv4/ip_forward
          echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects
          /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
          /sbin/iptables-save > /etc/sysconfig/iptables
          mkdir -p /etc/sysctl.d/
          cat << NatConfFileMarker > /etc/sysctl.d/nat.conf
          net.ipv4.ip_forward = 1
          net.ipv4.conf.eth0.send_redirects = 0
          NatConfFileMarker
          /opt/aws/bin/cfn-signal -e 0 --resource NATInstance --stack ${AWS::StackName} --region ${AWS::Region}
      Tags:
        - Key: key
          Value: value
    CreationPolicy:
      ResourceSignal: 
        Count: 1
        Timeout: PT5M      
Outputs:
  VPC:
    Description: VPC of the base network
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  PublicSubnetA:
    Description: First Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  PublicSubnetB:
    Description: Second Public Subnet
    Condition: BuildPublicB
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
  PublicSubnetC:
    Description: Third Public Subnet
    Condition: BuildPublicC
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetC
  PrivateSubnetA:
    Condition: BuildPrivateSubnets
    Description: First Private Subnet
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA
  PrivateSubnetB:
    Condition: BuildPrivateB
    Description: Second Private Subnet
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB
  PrivateSubnetC:
    Condition: BuildPrivateC
    Description: Third Private Subnet
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetC